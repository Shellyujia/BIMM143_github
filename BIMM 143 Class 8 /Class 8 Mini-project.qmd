---
title: "Class 8 Mini Project: PCA"
author: "Yujia Liu"
format: gfm
---

It is important to consider scalling your sata before analysis such as PCA.

For example:

```{r}
head(mtcars)
```
```{r}
colMeans(mtcars) #Very different values
```
```{r}
apply(mtcars, 2, sd)
```
```{r}
x <- scale(mtcars)
head(x)
```

```{r}
round(colMeans(x), 2)
```

Key-point: It is usually always a good idea to scale your data before to PCA...

## Breast Cancer Biopsy Analysis

```{r}
# Save your input data file into your Project directory
fna.data <- "WisconsinCancer.csv"

# Complete the following code to input the data and store as wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
```

### 1. Exploratory data analysis

```{r}
# We can use -1 here to remove the first column since the first column diagnosis contains the results
wisc.data <- wisc.df[,-1]

```

```{r}
# Create diagnosis vector for later 
diagnosis <- wisc.df$diagnosis
```

> Q1. How many observations are in this dataset?

```{r}
nrow(wisc.df)
```

> Q2. How many of the observations have a malignant diagnosis?

```{r}
table(diagnosis)
```

> Q3. How many variables/features in the data are suffixed with _mean?

```{r}
variable_names <- colnames(wisc.data)
variable_names

```

```{r}
title_with_mean <- grep("_mean", variable_names, ignore.case = FALSE, value = TRUE)
length(title_with_mean)

```

### 2. Principle component analysis

```{r}
# Check column means and standard deviations
colMeans(wisc.data)

apply(wisc.data,2,sd)
```

```{r}
# Perform PCA on scaled wisc.data 
wisc.pr <- prcomp(wisc.data, scale = T )
```

```{r}
# Look at summary of results
summary(wisc.pr)
```

> Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

0.4427

> Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

3

> Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

7


#### Interpretation PCA results

> Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?

```{r}
biplot(wisc.pr)
#Difficult to understand
```

Main "PC score plot", "PC1 vs PC2 plot"

```{r}
attributes(wisc.pr) #

plot(wisc.pr$x[,1], wisc.pr$x[,2], 
     col = as.factor(diagnosis),
     xlab = "PC1", ylab = "PC2")

```

> Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

```{r}
plot(wisc.pr$x[,1], wisc.pr$x[,3], 
     col = as.factor(diagnosis),
     xlab = "PC1", ylab = "PC3")
```
PC2 explains more variance in the original data than PC3, the first plot "PC1 vs PC2" has a cleaner cut separating the two subgroups (malignant and benign). Overall, the plots indicate that PC1 is capturing a separation of malignant (red) from benign (black) samples.


As this is such a striking result let’s see if we can use the ggplot2 package to make a more fancy figure of these results. Remember that `ggplot` requires a data.frame as input and we will also need to add our diagnosis vector as a column if we want to use it for mapping to the plot color aesthetic.

```{r}
# Create a data.frame for ggplot
df <- as.data.frame(wisc.pr$x)
df$diagnosis <- diagnosis

# Load the ggplot2 package
library(ggplot2)

# Make a scatter plot colored by diagnosis
ggplot(df) + 
  aes(PC1, PC2, col=diagnosis) + 
  geom_point()
```
Calculate the variance of each principal component by squaring the sdev component of wisc.pr (i.e. wisc.pr$sdev^2). Save the result as an object called pr.var.

```{r}
# Calculate variance of each component
pr.var <- wisc.pr$sdev^2
head(pr.var)
```

```{r}
# Variance explained by each principal component: pve
pve <- pr.var / sum(pr.var)

# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component", 
     ylab = "Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o")
```
```{r}
# Alternative scree plot of the same data, note data driven y-axis
barplot(pve, ylab = "Precent of Variance Explained",
     names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )
```
```{r}
## ggplot based graph
#install.packages("factoextra")
library(factoextra)
fviz_eig(wisc.pr, addlabels = TRUE)
```


#### Communicating PCA results

> Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean?

```{r}
wisc.pr$rotation["concave.points_mean",1]
```


> Q10. What is the minimum number of principal components required to explain 80% of the variance of the data?

```{r}
summary(wisc.pr)
```
minimum of 5 is needed.

### 3.Hierarchical clustering

```{r}
# Scale the wisc.data data using the "scale()" function
data.scaled <- scale(wisc.data)

```

Calculate the (Euclidean) distances between all pairs of observations in the new scaled dataset and assign the result to "data.dist".

```{r}
data.dist <- dist(data.scaled)
```

Create a hierarchical clustering model using complete linkage. Manually specify the method argument to hclust() and assign the results to wisc.hclust.

```{r}
wisc.hclust <- hclust(data.dist)
wisc.hclust
```


> Q11. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?

```{r}
plot(wisc.hclust)
abline(h= 19, col="red", lty=2)
```

### 5. Combine PCA and clustering

Our PCA results were in `wisc.or$x`

```{r}
#distance matrix 
d <- dist(wisc.pr$x[,1:3])
hc <- hclust(d, method = "ward.D2")
plot(hc)
```

Cut tree into two groups

```{r}
grps <- cutree(hc, k=2)
```

```{r}
plot(wisc.pr$x, col = grps)
```

Compare my clustering result (my `grps`) to the expert `diagnosis`

```{r}
table(diagnosis)
table(grps)
```

```{r}
table(diagnosis, grps)
```
> Q12. Can you find a better cluster vs diagnoses match by cutting into a different number of clusters between 2 and 10? （Optional)

```{r}

grps3 <- cutree(hc, k=3)
plot(wisc.pr$x, col = grps3)

number <- c(2:10)
func <- function(number){
  grps <- cutree(hc, k= number)
  plot(wisc.pr$x, col = grps)
}

```


> Q13. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning.

```{r}
plot(hclust(d, method = "ward.D2")) #This is the best! Gives the clear 2 groups

plot(hclust(d, method = "single"))

plot(hclust(d, method = "complete"))

plot(hclust(d, method = "average"))
```


```{r}
g <- as.factor(grps)
levels(g)
```
```{r}
g <- relevel(g,2)
levels(g)
```

```{r}
# Plot using our re-ordered factor 
plot(wisc.pr$x[,1:2], col=g)
```

```{r}
## Use the distance along the first 7 PCs for clustering i.e. wisc.pr$x[, 1:7]
wisc.pr.hclust <- hclust(d, method="ward.D2")
```

```{r}
wisc.pr.hclust.clusters <- cutree(wisc.pr.hclust, k=2)
```

> Q15. How well does the newly created model with four clusters separate out the two diagnoses?

```{r}
# Compare to actual diagnoses
table(wisc.pr.hclust.clusters, diagnosis)
```
> Q16. How well do the k-means and hierarchical clustering models you created in previous sections (i.e. before PCA) do in terms of separating the diagnoses? Again, use the table() function to compare the output of each model (wisc.km$cluster and wisc.hclust.clusters) with the vector containing the actual diagnoses.


```{r}
#table(wisc.km$cluster, diagnosis)
#table(wisc.pr.hclust.clusters, diagnosis)
```
```{r}
##    diagnosis
##       B   M
##   1  14 175
##   2 343  37

##                     diagnosis
## wisc.hclust.clusters   B   M
##                    1  12 165
##                    2   2   5
##                    3 343  40
##                    4   0   2
```



###Prediction

```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```
```{r}
plot(wisc.pr$x[,1:2], col=g)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```
>Q18. Which of these new patients should we prioritize for follow up based on your results?

We should prioritize Patient 1 for follow up as his/her symptoms(data) likely align with malignent diagnosis according to PCA.
