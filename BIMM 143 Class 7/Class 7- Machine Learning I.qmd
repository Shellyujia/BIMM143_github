---
title: "Class 7: Machine Learning I"
author: "Yujia Liu (PID:A16967405)"
format: gfm
---

Today we are going to learn how to apply different machine learning methods, begining with clustering:

The goal here is to find cluster/groups in your input data.

First I will make up some data with clear groups. For this I will use the `rnorm()`function.

```{r}
rnorm(10) #Give 10 random numbers from normal distribution 
```

```{r}
hist(rnorm(10000, mean = 3))
```
```{r}
n <- 10000
x <- c(rnorm(n,-3), rnorm(n), +3) #Make a vector of normal distribution
hist(x)

```
```{r}
n <- 30
x <- c(rnorm(n,-3), rnorm(n), +3) 
y <- rev(x)

z <- cbind(x,y)
head(z)
plot(z)
```
Use the `kmeans()` function setting k to 2 and nstart=20

Inspect/print the results


> Q. How many points are in each cluster?

> Q. What 'component' of your result object details
     - cluster size?
     - cluster assignment/membership?
     - cluster center?


```{r}
km <- kmeans(z, centers = 2)
km
```

Results in kmeans object `km`
```{r}
attributes(km)
```
cluster size?
```{r}
km$size
```

cluster assignment/membership?
```{r}
km$cluster
```

cluster center?
```{r}
km$centers
```

> Q. Plot x colored by the kmeans cluster assignment and add cluster centers as blue points

R will re-cycle the shorter color vector to be the same length as the longer (number of data points) in z
```{r}
plot(z, col=c("red", "blue"))
```
```{r}
plot(z, col = km$cluster)
points(km$centers, col = "blue",pch = 15, cex=3) #Make mean shown on plot.
```

> Q. Can you run kmeans and ask for 4 clusters please and plot the results like we have done above?

```{r}
km4 <- kmeans(z,centers = 4)
plot(z, col = km4$cluster)
points(km4$centers, col = "blue",pch = 15, cex=3) 
#It will be different every time you run it.
```

##Hierarchical Clustering

Let's take our same made-up data `z` and see how hclust works.

First we need a distance matrix of our data to be clustered.
```{r}
d <- dist(z)
hc <- hclust(d)
hc
```

```{r}
plot(hc)
abline(h=8, col="red")
```

I can gget my cluster membership vector by "cutting the tree" with the `cutree()` function like so:

```{r}
grps <- cutree(hc, h=8)
grps
```

Can you plot `z` colored by our hclust results:

```{r}
plot(z, col = grps)
```


##PCA of UK food data

Read data from the UK on food consumption in different parts of the UK.

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url, row.names=1)
head(x)
```
```{r}
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))
```

A so-called "Pairs" plot can be useful for small datasets like this:

```{r}
pairs(x, col=rainbow(10), pch=16)
```

It is hard to see structure and treds in even this small data-set. How will we ever do this when we have big datasets with 10002 or 10s of thousands of things we are measuring...


###PCA to the rescue

Let's see how PCA deals with this dataset. So main function in base R to do PCA is called `prcomp()`
```{r}
pca <- prcomp(t(x))
summary(pca)
```

Let's see what's inside this `pca` object that we created from running `prcomp()`

```{r}
attributes(pca)
```

```{r}
pca$x
```

```{r}
plot(pca$x[,1], pca$x[,2], 
     col = c("black", "red", "blue", "darkgreen"), 
     pch=16,
     xlab="PC1 (67.4%)", 
     ylab="PC2 (29%)")
```

